{
	"info": {
		"_postman_id": "45132ddf-7f82-476f-b015-07ec61923d33",
		"name": "Rails React App",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tests",
			"item": [
				{
					"name": "Data_Driven_User_Create",
					"item": [
						{
							"name": "Create_User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e893f38-706d-4bb4-a7b4-6466e4ad6ddd",
										"exec": [
											"if(pm.iterationData.get(\"test_tag\")!=\"missing_field_value\"){",
											"let jsonData = JSON.parse(responseBody);",
											"let jsonSchema_success=JSON.parse(pm.environment.get(\"json_schema_success_user_creation\"));",
											"let jsonSchem_failed=JSON.parse(pm.environment.get(\"json_schema_failed\"));",
											"let status;",
											"",
											"if((pm.iterationData.get(\"message\")).includes('Success')){",
											"",
											"pm.test(\"Status code is 200  for \"+pm.iterationData.get('test_name'), function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Schema is valid  for \"+pm.iterationData.get('test_name'), function() {",
											"  status=tv4.validate(jsonData,jsonSchema_success, true, true);",
											"",
											"  if(!status){",
											"      console.log(\"Schema error message is:\"+tv4.error.message+\" Error dataPath is:\"+tv4.error.dataPath+\" Error schemaPath is:\"+tv4.error.schemaPath);",
											"  }",
											"",
											"  pm.expect(status).to.be.true;",
											"});    ",
											"",
											"}else{    ",
											"    let array=[\"invalid_client_id\",",
											"\"invalid_client_secret\",",
											"\"blank_client_id\",",
											"\"blank_client_secret\",",
											"];",
											"",
											"    ",
											"    if(array.includes(pm.iterationData.get(\"test_name\"))){",
											"        ",
											"        pm.test(\"Status code is 401 for \"+pm.iterationData.get('test_name'), function () {",
											"             pm.response.to.have.status(401);",
											"        });",
											"        ",
											"    }else{",
											"        ",
											"        pm.test(\"Status code is 422  for \"+pm.iterationData.get('test_name'), function () {",
											"            pm.response.to.have.status(422);",
											"        });",
											"        ",
											"        ",
											"    }",
											"",
											"pm.test(\"Schema is valid  for \"+pm.iterationData.get('test_name'), function() {",
											"  status=tv4.validate(jsonData,jsonSchem_failed, true, true);",
											"",
											"  if(!status){",
											"      console.log(\"Schema error message is:\"+tv4.error.message+\" Error dataPath is:\"+tv4.error.dataPath+\" Error schemaPath is:\"+tv4.error.schemaPath);",
											"  }",
											"",
											"  pm.expect(status).to.be.true;",
											"});    ",
											"        ",
											"}",
											"    ",
											"",
											"pm.test(\"Check the message for \"+pm.iterationData.get('test_name'), function () {",
											"    pm.expect(jsonData.message).to.eql(pm.iterationData.get('message'));",
											"});",
											"    ",
											"}else{",
											"",
											"pm.test(\"Status code is 400 for \"+pm.iterationData.get('test_name'), function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8cdb724d-af49-4b24-96cd-a4f6b4ef0f31",
										"exec": [
											"const uuid = require('uuid');",
											"",
											"if(pm.iterationData.get(\"test_tag\")==='random_email'){",
											"    let email=uuid()+'@domain.com';",
											"    pm.variables.set(\"user_email\",'\"'+email+'\"');",
											"}else if(pm.iterationData.get(\"test_name\")==='invalid_email_missing_domain_name'){",
											"    let email=uuid();",
											"    pm.variables.set(\"user_email\",'\"'+email+'\"');",
											"}else if(pm.iterationData.get(\"test_name\")==='invalid_email_missing_domain_suffix'){",
											"    let email=uuid()+'@domain';",
											"    pm.variables.set(\"user_email\",'\"'+email+'\"');",
											"}else if(pm.iterationData.get(\"test_tag\")==='missing_field_value'){",
											"    ",
											" if(pm.iterationData.get(\"test_name\")==='client_email_field_value_null' || pm.iterationData.get(\"test_name\")==='client_email_as_non_string') {",
											"   pm.variables.set(\"user_email\",pm.iterationData.get(\"user_email\"));",
											"}else{",
											"    let email=uuid()+'@domain';",
											"    pm.variables.set(\"user_email\",'\"'+email+'\"');",
											"}",
											"}",
											"else",
											"{",
											"    pm.variables.set(\"user_email\",pm.iterationData.get(\"user_email\"));",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"client_id\": {{client_id}},\r\n  \"client_secret\": {{client_secret}},\r\n  \"user\": {\r\n    \"first_name\": {{user_firstname}},\r\n    \"last_name\": {{user_lastname}},\r\n    \"password\": {{password}},\r\n    \"email\": {{user_email}},\r\n    \"image_url\": {{image_url}}\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/api/v1/users",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": [
								{
									"name": "Create",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"client_id\": \"{{client_id}}\",\n\t\"client_secret\": \"{{client_secret}}\",\n\t\"user\": {\n\t\t\"first_name\": \"A\",\n\t\t\"last_name\": \"User\",\n\t\t\"password\": \"password\",\n\t\t\"email\": \"michael+2@showoff.ie\",\n\t\t\"image_url\": \"https://static.thenounproject.com/png/961-200.png\"\n\t}\n}"
										},
										"url": {
											"raw": "{{api_url}}/api/v1/users",
											"host": [
												"{{api_url}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Date",
											"value": "Tue, 05 Feb 2019 12:08:37 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding, Origin"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										},
										{
											"key": "Etag",
											"value": "W/\"fb8dc733a1607e6291092fdfdc867eb3\""
										},
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "X-Request-Id",
											"value": "547cee28-739c-4a52-872a-95c7a35831c0"
										},
										{
											"key": "X-Runtime",
											"value": "0.332650"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 0,\n    \"message\": \"Success\",\n    \"data\": {\n        \"user\": {\n            \"id\": 3,\n            \"name\": \"A User\",\n            \"images\": {\n                \"small_url\": \"https://showoff-rails-react-api-production.s3.amazonaws.com/users/images/missing/missing.jpg\",\n                \"medium_url\": \"https://showoff-rails-react-api-production.s3.amazonaws.com/users/images/missing/missing.jpg\",\n                \"large_url\": \"https://showoff-rails-react-api-production.s3.amazonaws.com/users/images/missing/missing.jpg\",\n                \"original_url\": \"https://showoff-rails-react-api-production.s3.amazonaws.com/users/images/missing/missing.jpg\"\n            },\n            \"first_name\": \"A\",\n            \"last_name\": \"User\",\n            \"date_of_birth\": null,\n            \"email\": \"michael+2@showoff.ie\",\n            \"active\": true\n        },\n        \"token\": {\n            \"access_token\": \"475567c781beffe3a97f899d95b15b252d82368141662a25684eed56f8c75cf1\",\n            \"token_type\": \"Bearer\",\n            \"expires_in\": 2592000,\n            \"refresh_token\": \"fbdeace27b089736f9ee9856b35daeff4a7fd24b813ff65f7cdaa87738846962\",\n            \"scope\": \"basic\",\n            \"created_at\": 1549368517\n        }\n    }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Data_Driven_Token_Create",
					"item": [
						{
							"name": "Create_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb92defa-e610-4e08-9a92-a5764a31ae67",
										"exec": [
											"if(pm.iterationData.get(\"test_tag\")!=\"missing_field_value\"){",
											"let jsonData = JSON.parse(responseBody);",
											"let jsonSchema_success=JSON.parse(pm.environment.get(\"json_schema_success_token_creation\"));",
											"let jsonSchem_failed=JSON.parse(pm.environment.get(\"json_schema_failed\"));",
											"let status;",
											"",
											"if((pm.iterationData.get(\"message\")).includes('Success')){",
											"",
											"pm.test(\"Status code is 200  for \"+pm.iterationData.get('test_name'), function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Schema is valid  for \"+pm.iterationData.get('test_name'), function() {",
											"  status=tv4.validate(jsonData,jsonSchema_success, true, true);",
											"",
											"  if(!status){",
											"      console.log(\"Schema error message is:\"+tv4.error.message+\" Error dataPath is:\"+tv4.error.dataPath+\" Error schemaPath is:\"+tv4.error.schemaPath);",
											"  }",
											"",
											"  pm.expect(status).to.be.true;",
											"});    ",
											"",
											"}else{    ",
											"    let array=[\"invalid_client_id\",",
											"\"invalid_client_secret\",",
											"\"blank_client_id\",",
											"\"blank_client_secret\",",
											"];",
											"",
											"    ",
											"    if(array.includes(pm.iterationData.get(\"test_name\"))){",
											"        ",
											"        pm.test(\"Status code is 401 for \"+pm.iterationData.get('test_name'), function () {",
											"             pm.response.to.have.status(401);",
											"        });",
											"        ",
											"    }else{",
											"        ",
											"        pm.test(\"Status code is 422  for \"+pm.iterationData.get('test_name'), function () {",
											"            pm.response.to.have.status(422);",
											"        });",
											"        ",
											"        ",
											"    }",
											"",
											"pm.test(\"Schema is valid  for \"+pm.iterationData.get('test_name'), function() {",
											"  status=tv4.validate(jsonData,jsonSchem_failed, true, true);",
											"",
											"  if(!status){",
											"      console.log(\"Schema error message is:\"+tv4.error.message+\" Error dataPath is:\"+tv4.error.dataPath+\" Error schemaPath is:\"+tv4.error.schemaPath);",
											"  }",
											"",
											"  pm.expect(status).to.be.true;",
											"});    ",
											"        ",
											"}",
											"    ",
											"",
											"pm.test(\"Check the message for \"+pm.iterationData.get('test_name'), function () {",
											"    pm.expect(jsonData.message).to.eql(pm.iterationData.get('message'));",
											"});",
											"    ",
											"}else{",
											"",
											"pm.test(\"Status code is 400 for \"+pm.iterationData.get('test_name'), function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "91443557-6165-4a61-b31d-13616acaf9d3",
										"exec": [
											"const uuid = require('uuid');",
											"",
											"if(pm.iterationData.get(\"test_tag\")==='random_email'){",
											"    let email=uuid()+'@domain.com';",
											"    pm.variables.set(\"user_email\",'\"'+email+'\"');",
											"}else",
											"{",
											"    pm.variables.set(\"user_email\",pm.iterationData.get(\"user_email\"));",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"grant_type\": {{type}},\n    \"client_id\": {{client_id}},\n    \"client_secret\": {{client_secret}},\n    \"username\": {{user_email}},\n    \"password\": {{password}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/oauth/token",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"response": [
								{
									"name": "Create",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"grant_type\": \"password\",\n    \"client_id\": \"{{client_id}}\",\n    \"client_secret\": \"{{client_secret}}\",\n    \"username\": \"michael@showoff.ie\",\n    \"password\": \"password\"\n}"
										},
										"url": {
											"raw": "{{api_url}}/oauth/token",
											"host": [
												"{{api_url}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Date",
											"value": "Tue, 05 Feb 2019 12:05:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding, Origin"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										},
										{
											"key": "Etag",
											"value": "W/\"60aecbb054f7f34d36fb73371b5d337f\""
										},
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "X-Request-Id",
											"value": "582dd38e-6672-4cb9-9b3e-a71286b0ae0e"
										},
										{
											"key": "X-Runtime",
											"value": "0.265595"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 0,\n    \"message\": \"Success\",\n    \"data\": {\n        \"token\": {\n            \"access_token\": \"479c8407d69e5bbc5079936e13314b50971d7028a11994a3be83c8f89027835f\",\n            \"token_type\": \"Bearer\",\n            \"expires_in\": 2592000,\n            \"refresh_token\": \"6399bbcf509079f7565a30d06de245e5414e554d74328181f7fe4313bb256c29\",\n            \"scope\": \"basic\",\n            \"created_at\": 1549368326\n        }\n    }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Data_Driven_User_Update",
					"item": [
						{
							"name": "Create_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb92defa-e610-4e08-9a92-a5764a31ae67",
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"token\", jsonData.data.token.access_token);",
											"postman.setEnvironmentVariable(\"body_token\",'\"'+jsonData.data.token.access_token+'\"');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "91443557-6165-4a61-b31d-13616acaf9d3",
										"exec": [
											"if(pm.iterationData.get(\"test_tag\")===\"revoke_token\"){",
											"    postman.setNextRequest(\"Revoke_Token\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"grant_type\": \"password\",\r\n    \"client_id\": \"277ef29692f9a70d511415dc60592daf4cf2c6f6552d3e1b769924b2f2e2e6fe\",\r\n    \"client_secret\": \"d6106f26e8ff5b749a606a1fba557f44eb3dca8f48596847770beb9b643ea352\",\r\n    \"username\": \"testunique@gmail.com\",\r\n    \"password\": \"Test123!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_url}}/oauth/token",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"response": [
								{
									"name": "Create",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"grant_type\": \"password\",\n    \"client_id\": \"{{client_id}}\",\n    \"client_secret\": \"{{client_secret}}\",\n    \"username\": \"michael@showoff.ie\",\n    \"password\": \"password\"\n}"
										},
										"url": {
											"raw": "{{api_url}}/oauth/token",
											"host": [
												"{{api_url}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Date",
											"value": "Tue, 05 Feb 2019 12:05:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding, Origin"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										},
										{
											"key": "Etag",
											"value": "W/\"60aecbb054f7f34d36fb73371b5d337f\""
										},
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "X-Request-Id",
											"value": "582dd38e-6672-4cb9-9b3e-a71286b0ae0e"
										},
										{
											"key": "X-Runtime",
											"value": "0.265595"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 0,\n    \"message\": \"Success\",\n    \"data\": {\n        \"token\": {\n            \"access_token\": \"479c8407d69e5bbc5079936e13314b50971d7028a11994a3be83c8f89027835f\",\n            \"token_type\": \"Bearer\",\n            \"expires_in\": 2592000,\n            \"refresh_token\": \"6399bbcf509079f7565a30d06de245e5414e554d74328181f7fe4313bb256c29\",\n            \"scope\": \"basic\",\n            \"created_at\": 1549368326\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e893f38-706d-4bb4-a7b4-6466e4ad6ddd",
										"exec": [
											"if(pm.iterationData.get(\"test_tag\")!=\"missing_field_value\"){",
											"let jsonData = JSON.parse(responseBody);",
											"let jsonSchema_success=JSON.parse(pm.environment.get(\"json_schema_success_user_update\"));",
											"let jsonSchem_failed=JSON.parse(pm.environment.get(\"json_schema_failed\"));",
											"let status;",
											"",
											"if((pm.iterationData.get(\"message_user_update\")).includes('Success')){",
											"",
											"",
											"pm.test(\"Schema is valid  for \"+pm.iterationData.get('test_name'), function() {",
											"  status=tv4.validate(jsonData,jsonSchema_success, true, true);",
											"",
											"  if(!status){",
											"      console.log(\"Schema error message is:\"+tv4.error.message+\" Error dataPath is:\"+tv4.error.dataPath+\" Error schemaPath is:\"+tv4.error.schemaPath);",
											"  }",
											"",
											"  pm.expect(status).to.be.true;",
											"});    ",
											"",
											"}else{",
											"",
											"pm.test(\"Schema is valid  for \"+pm.iterationData.get('test_name'), function() {",
											"  status=tv4.validate(jsonData,jsonSchem_failed, true, true);",
											"",
											"  if(!status){",
											"      console.log(\"Schema error message is:\"+tv4.error.message+\" Error dataPath is:\"+tv4.error.dataPath+\" Error schemaPath is:\"+tv4.error.schemaPath);",
											"  }",
											"",
											"  pm.expect(status).to.be.true;",
											"});    ",
											"        ",
											"}",
											"pm.test(\"Check the message for \"+pm.iterationData.get('test_name'), function () {",
											"    pm.expect(jsonData.message).to.eql(pm.iterationData.get('message_user_update'));",
											"});",
											"}",
											"",
											"pm.test(\"Status code is \"+pm.iterationData.get('status_code_user_update')+\" for \"+pm.iterationData.get('test_name'), function () {",
											"    pm.response.to.have.status(pm.iterationData.get('status_code_user_update'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b9f5638c-1463-4cdb-a4f2-ad93130640fd",
										"exec": [
											"if(pm.iterationData.get(\"test_tag\")==='invalid_token'){",
											"    pm.variables.set(\"token\",pm.iterationData.get(\"token\"));",
											"    ",
											"}else{",
											"    pm.variables.set(\"token\",pm.environment.get(\"token\"));",
											"    ",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"user\": {\r\n    \"first_name\": {{user_firstname}},\r\n    \"last_name\": {{user_lastname}},\r\n    \"date_of_birth\": {{user_dob}},\r\n    \"image_url\": {{image_url}}\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{api_url}}/api/v1/users/{{id}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"{{id}}"
									]
								}
							},
							"response": [
								{
									"name": "Update",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user\":{\n        \"first_name\" : \"Another\",\n        \"last_name\" : \"User\",\n        \"date_of_birth\" : 1464083530,\n        \"image_url\": \"https://static.thenounproject.com/png/961-200.png\"\n    }\n}"
										},
										"url": {
											"raw": "{{api_url}}/api/v1/users/me?=",
											"host": [
												"{{api_url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"me"
											],
											"query": [
												{
													"key": "",
													"value": ""
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Date",
											"value": "Tue, 05 Feb 2019 12:08:54 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding, Origin"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										},
										{
											"key": "Etag",
											"value": "W/\"4cf1f1db08156a965762b701691f5fe3\""
										},
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "X-Request-Id",
											"value": "5fe41622-7e88-4c65-aa9c-b66a6dd2178b"
										},
										{
											"key": "X-Runtime",
											"value": "0.052233"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 0,\n    \"message\": \"Success\",\n    \"data\": {\n        \"user\": {\n            \"id\": 3,\n            \"name\": \"Another User\",\n            \"images\": {\n                \"small_url\": \"https://showoff-rails-react-api-production.s3.amazonaws.com/users/images/000/000/003/small/961-200.png?1549368517\",\n                \"medium_url\": \"https://showoff-rails-react-api-production.s3.amazonaws.com/users/images/000/000/003/medium/961-200.png?1549368517\",\n                \"large_url\": \"https://showoff-rails-react-api-production.s3.amazonaws.com/users/images/000/000/003/large/961-200.png?1549368517\",\n                \"original_url\": \"https://showoff-rails-react-api-production.s3.amazonaws.com/users/images/000/000/003/original/961-200.png?1549368517\"\n            },\n            \"first_name\": \"Another\",\n            \"last_name\": \"User\",\n            \"date_of_birth\": 1464083530,\n            \"email\": \"michael+2@showoff.ie\",\n            \"active\": true\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Show (Me)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46884621-b026-498e-b4d0-fd070b2a1da7",
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"let jsonSchema_success = JSON.parse(pm.environment.get(\"json_schema_success_user_update\"));\r",
											"let jsonSchem_failed = JSON.parse(pm.environment.get(\"json_schema_failed\"));\r",
											"\r",
											"if (pm.iterationData.get(\"test_tag\") != \"invalid_token\" && pm.iterationData.get(\"status_code_token_revoke\").toString() !== \"200\") {\r",
											"    \r",
											"\r",
											"    pm.test(\"Schema is valid  for \" + pm.iterationData.get('test_name'), function () {\r",
											"        status = tv4.validate(jsonData, jsonSchema_success, true, true);\r",
											"\r",
											"        if (!status) {\r",
											"            console.log(\"Schema error message is:\" + tv4.error.message + \" Error dataPath is:\" + tv4.error.dataPath + \" Error schemaPath is:\" + tv4.error.schemaPath);\r",
											"        }\r",
											"\r",
											"        pm.expect(status).to.be.true;\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"    pm.test(\"Status code is 200 for \" + pm.iterationData.get('test_name'), function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"\r",
											"    if ((pm.iterationData.get(\"message_user_update\")).includes('Success')) {\r",
											"\r",
											"let firstname=pm.iterationData.get(\"user_firstname\");\r",
											"let lastname=pm.iterationData.get(\"user_lastname\");\r",
											"let dob=pm.iterationData.get(\"user_dob\");\r",
											"let email=\"testunique@gmail.com\";\r",
											"\r",
											"        pm.test(\"Validate that the updated information is reflected for \" + pm.iterationData.get('test_name'), function () {\r",
											"            pm.expect(jsonData.data.user.name).to.eql(firstname.substring(1, firstname.length-1)+\" \"+lastname.substring(1, lastname.length-1));\r",
											"            pm.expect(jsonData.data.user.first_name).to.eql(firstname.substring(1, firstname.length-1));\r",
											"            pm.expect(jsonData.data.user.last_name).to.eql(lastname.substring(1, lastname.length-1));\r",
											"            pm.expect(jsonData.data.user.date_of_birth.toString()).to.eql(dob.substring(1, dob.length-1));\r",
											"            pm.expect(jsonData.data.user.email).to.eql(\"testunique@gmail.com\");\r",
											"        });\r",
											"\r",
											"    }\r",
											"    else {\r",
											"        \r",
											"        \r",
											"let firstname=pm.iterationData.get(\"user_firstname\");\r",
											"let lastname=pm.iterationData.get(\"user_lastname\");\r",
											"let dob=pm.iterationData.get(\"user_dob\");\r",
											"let email=\"testunique@gmail.com\";\r",
											"\r",
											"\r",
											"        pm.test(\"Validate that the updated information is not reflected for \" + pm.iterationData.get('test_name'), function () {\r",
											"        \r",
											"            pm.expect(jsonData.data.user.name).not.to.eql(firstname.substring(1, firstname.length-1)+\" \"+lastname.substring(1, lastname.length-1));\r",
											"            pm.expect(jsonData.data.user.first_name).not.to.eql(firstname.substring(1, firstname.length-1));\r",
											"            pm.expect(jsonData.data.user.last_name).not.to.eql(lastname.substring(1, lastname.length-1));\r",
											"            pm.expect(jsonData.data.user.date_of_birth.toString()).not.to.eql(dob.substring(1, dob.length-1));\r",
											"            \r",
											"        });\r",
											"\r",
											"    }\r",
											"\r",
											"}\r",
											"\r",
											"else {\r",
											"\r",
											"    pm.test(\"Schema is valid  for \" + pm.iterationData.get('test_name'), function () {\r",
											"        status = tv4.validate(jsonData, jsonSchem_failed, true, true);\r",
											"\r",
											"        if (!status) {\r",
											"            console.log(\"Schema error message is:\" + tv4.error.message + \" Error dataPath is:\" + tv4.error.dataPath + \" Error schemaPath is:\" + tv4.error.schemaPath);\r",
											"        }\r",
											"\r",
											"        pm.expect(status).to.be.true;\r",
											"    });\r",
											"\r",
											"    pm.test(\"Check the message for \" + pm.iterationData.get('test_name'), function () {\r",
											"        pm.expect(jsonData.message).to.eql(pm.iterationData.get('message_user_update'));\r",
											"    });\r",
											"\r",
											"\r",
											"    pm.test(\"Status code is \" + pm.iterationData.get('status_code_user_update') + \" for \" + pm.iterationData.get('test_name'), function () {\r",
											"        pm.response.to.have.status(pm.iterationData.get('status_code_user_update'));\r",
											"    });\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "87a8b056-38a6-4975-bb0d-a328b0e6e2a8",
										"exec": [
											"postman.setNextRequest(null);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/api/v1/users/me",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"me"
									]
								}
							},
							"response": [
								{
									"name": "Show (Me)",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{api_url}}/api/v1/users/me",
											"host": [
												"{{api_url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"me"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Date",
											"value": "Tue, 05 Feb 2019 12:09:05 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding, Origin"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										},
										{
											"key": "Etag",
											"value": "W/\"c249aa33c8ea1264396a86f0b761e070\""
										},
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "X-Request-Id",
											"value": "a4b075dd-6aaa-4977-908e-70bcfb8ccb6a"
										},
										{
											"key": "X-Runtime",
											"value": "0.026051"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 0,\n    \"message\": \"Success\",\n    \"data\": {\n        \"user\": {\n            \"id\": 3,\n            \"name\": \"Another User\",\n            \"images\": {\n                \"small_url\": \"https://showoff-rails-react-api-production.s3.amazonaws.com/users/images/000/000/003/small/961-200.png?1549368535\",\n                \"medium_url\": \"https://showoff-rails-react-api-production.s3.amazonaws.com/users/images/000/000/003/medium/961-200.png?1549368535\",\n                \"large_url\": \"https://showoff-rails-react-api-production.s3.amazonaws.com/users/images/000/000/003/large/961-200.png?1549368535\",\n                \"original_url\": \"https://showoff-rails-react-api-production.s3.amazonaws.com/users/images/000/000/003/original/961-200.png?1549368535\"\n            },\n            \"first_name\": \"Another\",\n            \"last_name\": \"User\",\n            \"date_of_birth\": 1464083530,\n            \"email\": \"michael+2@showoff.ie\",\n            \"active\": true\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Revoke_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b33c944-42d5-42f6-95b1-0dada3ca7a22",
										"exec": [
											"if(pm.iterationData.get(\"test_tag\")!=\"missing_field_value\"){",
											"let jsonData = JSON.parse(responseBody);",
											"let jsonSchema_success=JSON.parse(pm.environment.get(\"json_schema_revoke_token_success\"));",
											"let jsonSchem_failed=JSON.parse(pm.environment.get(\"json_schema_failed\"));",
											"let status;",
											"",
											"if((pm.iterationData.get(\"message_token_revoke\")).includes('Success')){",
											"",
											"",
											"pm.test(\"Schema is valid  for \"+pm.iterationData.get('test_name'), function() {",
											"  status=tv4.validate(jsonData,jsonSchema_success, true, true);",
											"",
											"  if(!status){",
											"      console.log(\"Schema error message is:\"+tv4.error.message+\" Error dataPath is:\"+tv4.error.dataPath+\" Error schemaPath is:\"+tv4.error.schemaPath);",
											"  }",
											"",
											"  pm.expect(status).to.be.true;",
											"});    ",
											"",
											"}else{",
											"",
											"pm.test(\"Schema is valid  for \"+pm.iterationData.get('test_name'), function() {",
											"  status=tv4.validate(jsonData,jsonSchem_failed, true, true);",
											"",
											"  if(!status){",
											"      console.log(\"Schema error message is:\"+tv4.error.message+\" Error dataPath is:\"+tv4.error.dataPath+\" Error schemaPath is:\"+tv4.error.schemaPath);",
											"  }",
											"",
											"  pm.expect(status).to.be.true;",
											"});    ",
											"        ",
											"}",
											"pm.test(\"Check the message for \"+pm.iterationData.get('test_name'), function () {",
											"    pm.expect(jsonData.message).to.eql(pm.iterationData.get('message_token_revoke'));",
											"});",
											"}",
											"",
											"pm.test(\"Status code is \"+pm.iterationData.get('status_code_token_revoke')+\" for \"+pm.iterationData.get('test_name'), function () {",
											"    pm.response.to.have.status(pm.iterationData.get('status_code_token_revoke'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0544251e-ee19-47d8-be9c-23f032f49d98",
										"exec": [
											"if(pm.iterationData.get(\"token\")==='NA'){",
											"    pm.variables.set(\"token\",pm.environment.get(\"token\"));",
											"    ",
											"}",
											"else{",
											"     pm.variables.set(\"token\",pm.iterationData.get(\"token\"));",
											"}",
											"",
											"if(pm.iterationData.get(\"body_token\")==='NA'){",
											"    pm.variables.set(\"body_token\",pm.environment.get(\"body_token\"));",
											"}",
											"else{",
											"     pm.variables.set(\"body_token\",pm.iterationData.get(\"body_token\"));",
											"}",
											"   ",
											"postman.setNextRequest(\"Update\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"token\":{{body_token}}\r\n}"
								},
								"url": {
									"raw": "{{api_url}}/oauth/revoke",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"oauth",
										"revoke"
									]
								}
							},
							"response": [
								{
									"name": "Revoke",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"token\":\"{{token}}\"\n}"
										},
										"url": {
											"raw": "{{api_url}}/oauth/revoke",
											"host": [
												"{{api_url}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Date",
											"value": "Tue, 05 Feb 2019 12:05:57 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding, Origin"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										},
										{
											"key": "Etag",
											"value": "W/\"6df603a030b2ec26d9bd948df02ba753\""
										},
										{
											"key": "Cache-Control",
											"value": "max-age=0, private, must-revalidate"
										},
										{
											"key": "X-Request-Id",
											"value": "2dbfdbbc-ca6d-4421-80a7-ede5a4fc2451"
										},
										{
											"key": "X-Runtime",
											"value": "0.050926"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 0,\n    \"message\": \"Success\",\n    \"data\": {\n        \"message\": \"Token Successfully Revoked\"\n    }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}